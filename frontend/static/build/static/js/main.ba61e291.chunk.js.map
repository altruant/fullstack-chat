{"version":3,"sources":["components/Register/index.js","components/Login/index.js","components/Chat/List/index.js","components/Chat/Form/index.js","components/Chat/index.js","App.js","serviceWorker.js","index.js"],"names":["Register","props","state","username","email","password1","password2","handleInput","bind","handleSubmit","event","this","setState","target","name","value","e","preventDefault","fetch","method","headers","Cookies","get","body","JSON","stringify","response","json","data","console","log","set","key","onSubmit","htmlFor","type","onChange","placeholder","React","Component","Login","password","ChatList","messages","fetchMessages","setInterval","clearInterval","map","message","index","id","className","content","user","ChatForm","Chat","Fragment","App","isLoggedIn","remove","onClick","logOut","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ba61e291.chunk.js","sourcesContent":["import React from 'react';\nimport Cookies from 'js-cookie';\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n      username: '',\n      email: '',\n      password1: '',\n      password2: '',\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleInput(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    const response = await fetch('/api/v1/rest-auth/registration/', {\n      method: 'POST',\n      headers: {\n        'X-CSRFToken': Cookies.get('csrftoken'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state)\n    });\n\n    const data = await response.json();\n    console.log(data)\n    Cookies.set('Authorization', `Token ${data.key}`)\n\n  }\n  render() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n          <h2>Register</h2>\n          <label htmlFor=\"username\">Username</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleInput} placeholder=\"Username\"/>\n          <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleInput} placeholder=\"Email\"/>\n          <label htmlFor=\"password1\">Password</label>\n            <input type=\"password\" name=\"password1\" value={this.state.password1} onChange={this.handleInput} placeholder=\"Password\"/>\n          <label htmlFor=\"password2\">Confirm Password</label>\n            <input type=\"password\" name=\"password2\" value={this.state.password2} onChange={this.handleInput} placeholder=\"\"/>\n          <button type='submit'>Register</button>\n        </form>\n    )\n  }\n}\n\nexport default Register\n","import React from 'react';\nimport Cookies from 'js-cookie';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n      username: '',\n      password: '',\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleInput(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    const response = await fetch('/api/v1/rest-auth/login/', {\n      method: 'POST',\n      headers: {\n        'X-CSRFToken': Cookies.get('csrftoken'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state)\n    });\n\n    const data = await response.json();\n    Cookies.set('Authorization', `Token ${data.key}`)\n\n  }\n  render() {\n    return (\n        <form onSubmit={this.handleSubmit}>\n          <h2>Login</h2>\n          <label htmlFor=\"username\">Username</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleInput} placeholder=\"Username\"/>\n          <label htmlFor=\"password1\">Password</label>\n            <input type=\"password\" name=\"password\" value={this.state.password1} onChange={this.handleInput} placeholder=\"Password\"/>\n          <button type='submit'>Login</button>\n        </form>\n    )\n  }\n}\n\nexport default Login\n","import React from 'react';\nimport Cookies from 'js-cookie'\n\nclass ChatList extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      messages: [],\n    }\n    this.fetchMessages = this.fetchMessages.bind(this);\n  }\n  componentDidMount() {\n      this.fetchMessages();\n      setInterval(this.fetchMessages, 2000);\n  }\n  componentWillUnmount() {\n    clearInterval()\n  }\n  async fetchMessages() {\n    if(Cookies.get('Authorization')){\n      const response = await fetch('/api/v1/chats');\n      const data = await response.json();\n      this.setState({ messages: data });\n    } else {\n      this.setState({messages: []});\n    }\n  }\n\n  render() {\n    if(Cookies.get('Authorization')) {\n      return(\n        this.state.messages.map((message, index) => (\n          <div key={message.id}>\n            <div className=\"message\"><span className='content'>{message.content}</span><span className=\"username\">{message.user}</span></div>\n          </div>\n        ))\n      )\n    }\n    else {\n      return(\n        <h2>you are not logged in</h2>\n      )\n    }\n  }\n}\n\nexport default ChatList\n","import React from 'react';\nimport Cookies from 'js-cookie';\n\nclass ChatForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n      user: '',\n      content: '',\n\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleInput(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const response = await fetch('/api/v1/chats/', {\n      method: 'POST',\n      headers: {\n        'X-CSRFToken': Cookies.get('csrftoken'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state)\n    });\n\n    const data = await response.json();\n    Cookies.set('Authorization', `Token ${data.key}`)\n  }\n  render() {\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" name='content' value={this.state.content} onChange={this.handleInput}/>\n        <button type=\"submit\">Send</button>\n      </form>\n    )\n  }\n}\n\nexport default ChatForm\n","import React from 'react'\nimport ChatList from './List'\nimport ChatForm from './Form'\nclass Chat extends React.Component {\n  render() {\n    return(\n      <React.Fragment>\n        <ChatList />\n        <ChatForm />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Chat\n","import React from 'react';\nimport Register from './components/Register'\nimport Login from './components/Login'\nimport Chat from './components/Chat'\nimport Cookies from 'js-cookie'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      isLoggedIn: false,\n    }\n  }\n  async logOut() {\n    const response = await fetch('/api/v1/rest-auth/logout/', {\n      method: 'POST',\n      headers: {\n        'X-CSRFToken': Cookies.get('csrftoken'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state)\n    });\n\n    const data = await response.json();\n    Cookies.remove('Authorization')\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Chat isLoggedIn={this.state.isLoggedIn}/>\n        <Login />\n        <button onClick={() => this.logOut()}>Logout</button>\n        <Register />\n\n      </React.Fragment>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}